{{template "partials/header" .}}

Comprehensive Django development guidelines covering models, views, templates, and best practices for Python web development.

{{if eq .Target "claude"}}
## Usage
Invoke with `/python-django $ARGUMENTS` where arguments can include:
- `models` - for Django model guidelines
- `views` - for view and API patterns
- `templates` - for template best practices
- `admin` - for Django admin customization
- `testing` - for Django testing patterns
{{end}}

## Django Project Structure

### Recommended Layout
```
myproject/
├── manage.py
├── requirements/
│   ├── base.txt
│   ├── development.txt
│   └── production.txt
├── myproject/
│   ├── __init__.py
│   ├── settings/
│   │   ├── __init__.py
│   │   ├── base.py
│   │   ├── development.py
│   │   └── production.py
│   ├── urls.py
│   └── wsgi.py
└── apps/
    ├── users/
    ├── products/
    └── orders/
```

## Model Development

### Model Best Practices
{{if eq .Target "cursor"}}
```python
from django.db import models
from django.contrib.auth.models import AbstractUser
from django.core.validators import MinValueValidator, MaxValueValidator

class User(AbstractUser):
    """Custom user model with additional fields."""
    email = models.EmailField(unique=True)
    phone = models.CharField(max_length=20, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        db_table = 'users'
        verbose_name = 'User'
        verbose_name_plural = 'Users'
    
    def __str__(self):
        return self.username

class Product(models.Model):
    """Product model with proper validations."""
    name = models.CharField(max_length=200)
    description = models.TextField(blank=True)
    price = models.DecimalField(
        max_digits=10, 
        decimal_places=2,
        validators=[MinValueValidator(0)]
    )
    is_active = models.BooleanField(default=True)
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        ordering = ['-created_at']
        indexes = [
            models.Index(fields=['name']),
            models.Index(fields=['is_active', 'created_at']),
        ]
    
    def __str__(self):
        return self.name
```
{{else}}
- Use descriptive model names and field names
- Add proper Meta classes with ordering and indexes
- Implement `__str__` methods for all models
- Use appropriate field types and validators
- Add database indexes for frequently queried fields
{{end}}

### Relationships
- Use `ForeignKey` for many-to-one relationships
- Use `ManyToManyField` for many-to-many relationships
- Add `related_name` for reverse relationships
- Use `on_delete` appropriately (CASCADE, PROTECT, SET_NULL)

## Views and URLs

### Class-Based Views
{{if contains .Target "cursor,copilot"}}
```python
from django.views.generic import ListView, DetailView, CreateView
from django.contrib.auth.mixins import LoginRequiredMixin
from django.urls import reverse_lazy

class ProductListView(ListView):
    """List all active products."""
    model = Product
    template_name = 'products/list.html'
    context_object_name = 'products'
    paginate_by = 20
    
    def get_queryset(self):
        return Product.objects.filter(is_active=True)

class ProductCreateView(LoginRequiredMixin, CreateView):
    """Create a new product."""
    model = Product
    fields = ['name', 'description', 'price']
    template_name = 'products/create.html'
    success_url = reverse_lazy('products:list')
    
    def form_valid(self, form):
        form.instance.created_by = self.request.user
        return super().form_valid(form)
```
{{else}}
- Prefer class-based views for common patterns
- Use mixins for reusable functionality
- Implement proper permission checking
- Use `get_queryset()` to filter data appropriately
{{end}}

### URL Configuration
```python
# apps/products/urls.py
from django.urls import path
from . import views

app_name = 'products'

urlpatterns = [
    path('', views.ProductListView.as_view(), name='list'),
    path('create/', views.ProductCreateView.as_view(), name='create'),
    path('<int:pk>/', views.ProductDetailView.as_view(), name='detail'),
    path('<int:pk>/edit/', views.ProductUpdateView.as_view(), name='edit'),
]
```

## Forms and Validation

### Model Forms
{{if eq .Target "cursor"}}
```python
from django import forms
from django.core.exceptions import ValidationError
from .models import Product

class ProductForm(forms.ModelForm):
    """Form for creating and updating products."""
    
    class Meta:
        model = Product
        fields = ['name', 'description', 'price', 'category']
        widgets = {
            'description': forms.Textarea(attrs={'rows': 4}),
            'price': forms.NumberInput(attrs={'step': '0.01'}),
        }
    
    def clean_price(self):
        price = self.cleaned_data.get('price')
        if price and price <= 0:
            raise ValidationError('Price must be greater than zero.')
        return price
    
    def clean(self):
        cleaned_data = super().clean()
        name = cleaned_data.get('name')
        category = cleaned_data.get('category')
        
        # Cross-field validation
        if name and category:
            if Product.objects.filter(
                name=name, 
                category=category
            ).exclude(pk=self.instance.pk).exists():
                raise ValidationError(
                    'Product with this name already exists in this category.'
                )
        
        return cleaned_data
```
{{else}}
- Use ModelForms for database-backed forms
- Implement custom validation methods
- Add appropriate widgets for better UX
- Use clean() methods for cross-field validation
{{end}}

{{template "partials/common-guidelines" .}}

## Template Development

### Template Structure
```
templates/
├── base.html
├── components/
│   ├── navbar.html
│   └── footer.html
└── products/
    ├── list.html
    ├── detail.html
    └── form.html
```

### Template Best Practices
- Use template inheritance (`{% extends %}`)
- Create reusable components with `{% include %}`
- Use template filters appropriately
- Implement proper CSRF protection
- Use static files properly (`{% load static %}`)

{{template "partials/error-handling" .}}

## Django-Specific Error Handling

### Custom Error Pages
```python
# views.py
def handler404(request, exception):
    return render(request, '404.html', status=404)

def handler500(request):
    return render(request, '500.html', status=500)
```

### Exception Handling in Views
```python
from django.shortcuts import get_object_or_404
from django.contrib import messages
from django.db import transaction

class ProductUpdateView(UpdateView):
    def form_valid(self, form):
        try:
            with transaction.atomic():
                response = super().form_valid(form)
                messages.success(self.request, 'Product updated successfully!')
                return response
        except Exception as e:
            messages.error(self.request, f'Error updating product: {str(e)}')
            return self.form_invalid(form)
```

## Testing

### Model Testing
{{if contains .Target "cursor,copilot"}}
```python
from django.test import TestCase
from django.core.exceptions import ValidationError
from .models import Product

class ProductModelTest(TestCase):
    def setUp(self):
        self.product = Product.objects.create(
            name='Test Product',
            price=99.99
        )
    
    def test_string_representation(self):
        self.assertEqual(str(self.product), 'Test Product')
    
    def test_price_validation(self):
        with self.assertRaises(ValidationError):
            invalid_product = Product(name='Invalid', price=-10)
            invalid_product.full_clean()
```
{{else}}
- Write unit tests for all models
- Test model methods and properties
- Test model validation rules
- Use factory methods or fixtures for test data
{{end}}

### View Testing
- Test GET and POST requests
- Test authentication and permissions
- Test form validation
- Test redirects and status codes

{{template "partials/footer" .}}